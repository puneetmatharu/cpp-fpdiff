# ===============================================================================
# A template configuration file to be processed by configure_file(...). We rely
# on this file to make the oomph-lib library available to other CMake projects
# after it has been installed. It contains information about oomph-lib's
# dependencies and the project configuration.
#
# CMake will replace variables enclosed by "@" by their values during the
# configuration step and the populated config file will be placed in the build
# folder under the same filename but without the .in suffix. After the CMake
# installation step, the newly-generated config file will, by default, be
# installed to the user's lib/cmake/ directory (e.g. /usr/lib/cmake/). If the
# user specified a custom installation path, it will be placed there instead,
# but again under the lib/cmake/ subdirectory.
#
# Once the library has been installed, the configuration file can found using
# find_package(oomphlib). If a custom installation path was used, the user will
# need to append that path to the CMAKE_PREFIX_PATH so that the generated config
# can be found by CMake.
#
# WARNING: Do NOT change the name of this file unless the name of the package
# changes! The name of this file MUST match <package-name>Config.cmake or
# <lowercase-package-name>-config.cmake so that it can to be found by
# find_package(...).
# ===============================================================================

# ---------------------------[ INITIAL BOILERPLATE ]---------------------------

@PACKAGE_INIT@

# CMake module used to specify dependencies that should be propagated to
# consumers of the package
include(CMakeFindDependencyMacro)

# Add the build/installation path to the paths to search for CMake modules. This
# is helpful when we have distributed some .cmake file but we can't just include
# it ourselves, e.g.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

# -------------------[ EXTRACT IMPORTANT DEFINED VARIABLES ]-------------------

# FIXME: Tidy up file

# Package root directory
set(OOMPH_PROJECT_NAME "@PROJECT_NAME@")
set(OOMPH_ROOT_DIR "@OOMPH_ROOT_DIR@")
set(OOMPH_CMAKE_MODULE_DIR "${OOMPH_ROOT_DIR}/cmake")
set(OOMPHLIB_LIBRARIES "@OOMPHLIB_LIBRARIES@")

# Specify the location of non-standard CMake modules and the C++ standard
set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@ CACHE INTERNAL "")
set(CMAKE_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)

# Compile definitions generated by oomph-lib. These definitions will be required
# by a consumer of the package to correctly build code provided by oomph-lib.
set(OOMPH_COMPILE_DEFINITIONS @OOMPH_COMPILE_DEFINITIONS@)

# TODO: Remove unnecessary variables below from oomph-lib

# Capture general values from the configuration step that may be required by the
# user (mainly for the demo drivers)
set(HAVE_HSL_SOURCES @HAVE_HSL_SOURCES@)
set(HAVE_STACKTRACE @OOMPH_HAS_STACKTRACE@)
set(OOMPH_SUPPRESSED_TRIANGLE_LIB @SUPPRESS_TRIANGLE_LIB@)
set(OOMPH_SUPPRESSED_TETGEN_LIB @SUPPRESS_TETGEN_LIB@)
set(OOMPH_HAS_TETGEN @OOMPH_HAS_TETGEN@)
set(OOMPH_HAS_NEW_TETGEN @OOMPH_HAS_NEW_TETGEN@)
set(OOMPH_HAS_TRIANGLE @OOMPH_HAS_TRIANGLE@)
set(OOMPH_HAS_ZLIB @OOMPH_HAS_ZLIB@)
set(USING_OOMPH_SUPERLU @USING_OOMPH_SUPERLU@)

# Capture values from the configuration step to determine which dependencies
# should be forwarded to the user. Note that if the packages aren't requested,
# the variables won't have any values (because the _HAS_ variables won't be
# set). However, they will still be "falsey"
set(OOMPH_HAS_MPI @OOMPH_HAS_MPI@)
set(OOMPH_HAS_GKLIB @OOMPH_HAS_GKLIB@)
set(OOMPH_HAS_METIS @OOMPH_HAS_METIS@)
set(OOMPH_HAS_SUPERLU @OOMPH_HAS_SUPERLU@)
set(OOMPH_HAS_PARMETIS @OOMPH_HAS_PARMETIS@)
set(OOMPH_HAS_SUPERLU_DIST @OOMPH_HAS_SUPERLU_DIST@)
set(OOMPH_HAS_CGAL @OOMPH_HAS_CGAL@)
set(OOMPH_HAS_HYPRE @OOMPH_HAS_HYPRE@)
set(OOMPH_HAS_MUMPS @OOMPH_HAS_MUMPS@)
set(OOMPH_HAS_TRILINOS @OOMPH_HAS_TRILINOS@)

# Capture user's decision to their own libraries
set(OOMPH_USE_OPENBLAS_FROM "@OOMPH_USE_OPENBLAS_FROM@")
set(OOMPH_USE_MPI_FROM "@OOMPH_USE_MPI_FROM@")
set(OOMPH_USE_GKLIB_FROM "@OOMPH_USE_GKLIB_FROM@")
set(OOMPH_USE_METIS_FROM "@OOMPH_USE_METIS_FROM@")
set(OOMPH_USE_SUPERLU_FROM "@OOMPH_USE_SUPERLU_FROM@")
set(OOMPH_USE_PARMETIS_FROM "@OOMPH_USE_PARMETIS_FROM@")
set(OOMPH_USE_SUPERLU_DIST_FROM "@OOMPH_USE_SUPERLU_DIST_FROM@")
set(OOMPH_USE_GMP_FROM "@OOMPH_USE_GMP_FROM@")
set(OOMPH_USE_MPFR_FROM "@OOMPH_USE_MPFR_FROM@")
set(OOMPH_USE_BOOST_FROM "@OOMPH_USE_BOOST_FROM@")
set(OOMPH_USE_CGAL_FROM "@OOMPH_USE_CGAL_FROM@")
set(OOMPH_USE_MUMPS_FROM "@OOMPH_USE_MUMPS_FROM@")
set(OOMPH_USE_HYPRE_FROM "@OOMPH_USE_HYPRE_FROM@")
set(OOMPH_USE_TRILINOS_FROM "@OOMPH_USE_TRILINOS_FROM@")

# The gmsh executable
set(OOMPH_GMSH_COMMAND "@OOMPH_GMSH_COMMAND@")

# Add warning
set(OOMPH_CMAKE_BUILD_TYPE @CMAKE_BUILD_TYPE@)
set(OOMPH_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE OFF)
if(NOT OOMPH_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE)
  if(NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "${OOMPH_CMAKE_BUILD_TYPE}"))
    message(
      WARNING
        "oomph-lib was built with the build type '${OOMPH_CMAKE_BUILD_TYPE}' but you are now building a project that uses oomph-lib with the build type '${CMAKE_BUILD_TYPE}'! Did you remember to build the project with -DCMAKE_BUILD_TYPE=\"${OOMPH_CMAKE_BUILD_TYPE}\"?"
    )
  endif()
endif()

# ---------------------[ FORWARD DEPENDENCY REQUIREMENTS ]---------------------

# Python3 for self-tests
find_dependency(Python3 QUIET)

# MPI for MPI-enabled functionality
#
# TODO: Decide whether to store MPI_<lang>_COMPILER here...
if(OOMPH_HAS_MPI)
  if(OOMPH_USE_MPI_FROM)
    set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
    set(CMAKE_PREFIX_PATH "${OOMPH_USE_MPI_FROM}" CACHE INTERNAL "" FORCE)
    find_dependency(MPI REQUIRED)
    set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)
  endif()
  find_dependency(MPI REQUIRED)

  set(OOMPH_MPI_NUM_PROC @OOMPH_MPI_NUM_PROC@)
  set(OOMPH_MPI_RUN_COMMAND "@OOMPH_MPI_RUN_COMMAND@")
  set(OOMPH_MPI_VARIABLENP_RUN_COMMAND "@OOMPH_MPI_VARIABLENP_RUN_COMMAND@")
endif()

# ----------------------[ REQUIRED THIRD-PARTY LIBRARIES ]---------------------
# cmake-format: off

# Search for OpenBLAS/LAPACK libraries
find_dependency(OpenBLAS 0.3.25 REQUIRED GLOBAL PATHS ${OOMPH_USE_OPENBLAS_FROM} NO_DEFAULT_PATH)

# FIXME: This oddity (of looking for BLAS even though we've already found
# OpenBLAS) is to handle an issue in HYPRE. Although we built HYPRE with
# OpenBLAS, HYPRE searches (using CMake) for the BLAS library (not OpenBLAS). In
# some cases it won't be able to find it, resulting in an unexpected error
# during the configuration of the main oomph-lib library. To handle this, we'll
# tell CMake to locate the OpenBLAS library when looking for BLAS and find it
# ourselves. When HYPRE later calls find_dependency(BLAS), CMake will tell it
# that it has already found BLAS (the OpenBLAS version) and will make everything
# (hopefully) work!
set(BLA_VENDOR OpenBLAS)
set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
set(CMAKE_PREFIX_PATH ${OOMPH_USE_OPENBLAS_FROM})
find_dependency(BLAS REQUIRED)
find_dependency(LAPACK REQUIRED)
set(CMAKE_PREFIX_PATH ${BACKUP_CMAKE_PREFIX_PATH})

# ----------------------[ OPTIONAL THIRD-PARTY LIBRARIES ]---------------------

# -------------------
# SuperLU/SuperLUDist
# -------------------
# NOTE: We wrote a custom Find*.cmake scripts to search for GKlib, METIS and ParMETIS and
# SuperLU_DIST. They will internally read the variables OOMPH_USE_GKLIB_FROM, OOMPH_USE_METIS_FROM,
# OOMPH_USE_PARMETIS_FROM and OOMPH_USE_SUPERLU_DIST_FROM, respectively. The CMake code for
# SuperLU itself has been written properly so we can import it like a normal version CMake library
set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
set(CMAKE_PREFIX_PATH "${OOMPH_USE_GKLIB_FROM};${OOMPH_USE_METIS_FROM}" CACHE INTERNAL "" FORCE)
find_dependency(GKlib REQUIRED GLOBAL)
find_dependency(METIS REQUIRED GLOBAL)
set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)
find_dependency(superlu 6.0.1 REQUIRED GLOBAL PATHS ${OOMPH_USE_SUPERLU_FROM} NO_DEFAULT_PATH)

if(OOMPH_USE_SUPERLU_DIST_FROM)
  set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  set(CMAKE_PREFIX_PATH "${OOMPH_USE_PARMETIS_FROM};${OOMPH_USE_SUPERLU_DIST_FROM}" CACHE INTERNAL "" FORCE)
  find_dependency(ParMETIS REQUIRED GLOBAL)
  find_dependency(SuperLU_DIST REQUIRED GLOBAL)
  set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)
endif()

# -------------------
# CGAL
# -------------------
if(OOMPH_HAS_CGAL AND (NOT CGAL_FOUND))
  # NOTE: We wrote a custom FindGMP.cmake and FindMPFR.cmake script to search
  # for GMP and MPFR. Internally, they will read the variables OOMPH_USE_GMP_FROM
  # and OOMPH_USE_MPFR_FROM, respectively, that we defined earlier
  set(BACKUP_CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  set(CMAKE_PREFIX_PATH "${OOMPH_USE_GMP_FROM};${OOMPH_USE_MPFR_FROM}" CACHE INTERNAL "" FORCE)
  find_dependency(GMP REQUIRED GLOBAL)
  find_dependency(MPFR REQUIRED GLOBAL)
  set(CMAKE_PREFIX_PATH "${BACKUP_CMAKE_PREFIX_PATH}" CACHE INTERNAL "" FORCE)

  # Boost. If the user wants, they can inspect the value of OOMPH_REQUIRED_BOOST_COMPONENTS
  # after calling find_package(oomphlib)
  set(OOMPH_REQUIRED_BOOST_COMPONENTS thread system program_options)
  find_dependency(Boost 1.83.0 REQUIRED COMPONENTS ${OOMPH_REQUIRED_BOOST_COMPONENTS} GLOBAL PATHS ${OOMPH_USE_BOOST_FROM} NO_DEFAULT_PATH)

  # CGAL has a tendency to spit out an annoying warning if you don't build in Release mode.
  # The flag below is used to silence that warning
  set(CGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE ON)
  find_dependency(CGAL 5.6 REQUIRED GLOBAL PATHS ${OOMPH_USE_CGAL_FROM} NO_DEFAULT_PATH)
endif()

# -------------------
# MUMPS
# -------------------
if(OOMPH_HAS_MUMPS AND (NOT MUMPS_FOUND))
  if(OOMPH_HAS_MPI)
    set(SCALAPACK_ROOT "${OOMPH_USE_MUMPS_FROM}")
    find_dependency(SCALAPACK 2.2.1.8 REQUIRED GLOBAL PATHS ${OOMPH_USE_MUMPS_FROM} NO_DEFAULT_PATH)
  endif()
  find_dependency(MUMPS 5.6.2.5 REQUIRED GLOBAL PATHS ${OOMPH_USE_MUMPS_FROM} NO_DEFAULT_PATH)
endif()

# -------------------
# HYPRE
# -------------------
if(OOMPH_HAS_HYPRE AND (NOT HYPRE_FOUND))
  find_dependency(HYPRE 2.29.0 REQUIRED GLOBAL PATHS ${OOMPH_USE_HYPRE_FROM} NO_DEFAULT_PATH)
endif()

# -------------------
# Trilinos
# -------------------
if(OOMPH_HAS_TRILINOS AND (NOT Trilinos_FOUND))
  find_dependency(Trilinos 14.4.0 REQUIRED GLOBAL PATHS ${OOMPH_USE_TRILINOS_FROM} NO_DEFAULT_PATH)
endif()

# cmake-format: on
# --------------------------[ REMAINING BOILERPLATE ]--------------------------

include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Exports.cmake")

# -------------------[ INCLUDE EXTRA INSTALLED CMAKE FILES ]-------------------

include("${CMAKE_CURRENT_LIST_DIR}/OomphGetHashedTargetName.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddExecutable.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddTest.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphAddPureCppTest.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphDefineTestData.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/OomphEnableCodeCoverage.cmake")

# Define a 'uninstall' target (i.e. to run "ninja uninstall") to uninstall files
# if the user doesn't already have one
if(NOT TARGET uninstall)
  add_custom_target(
    uninstall
    COMMAND ${CMAKE_COMMAND} -P
            ${CMAKE_CURRENT_LIST_DIR}/${OOMPH_PROJECT_NAME}Uninstall.cmake)
endif()

# -----------------------------------------------------------------------------
